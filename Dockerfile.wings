# UPX Builder OS
FROM ubuntu:focal as upx-builder

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=US/Pacific \
    LC_ALL=C.UTF-8

# Install dependencies
RUN apt-get update && \
    apt-get -y upgrade && \
    apt-get -y install build-essential make cmake \
    gcc g++ git tzdata libssl-dev apt zlib1g-dev \
    clang curl bash wget

CMD [ "/bin/bash", "-c" ]

# Download UCL
RUN mkdir -p /usr/src/ucl && \
    curl -fsSLo /usr/src/ucl/ucl.tar.gz \
    http://www.oberhumer.com/opensource/ucl/download/ucl-1.03.tar.gz && \
    tar -xzf /usr/src/ucl/ucl.tar.gz -C /usr/src/ucl
WORKDIR /usr/src/ucl/ucl-1.03

# Configure
RUN export CFLAGS="$CFLAGS -std=c90 -fPIC" && \
    ./configure --build=$(uname -m)-unknown-linux-gnu

# Build
RUN make && make install

# Clone repository
RUN git clone --recursive https://github.com/upx/upx.git /usr/src/upx
WORKDIR /usr/src/upx

# Build
RUN make

# Builder OS
FROM golang:1.17-alpine AS builder

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=US/Pacific \
    LC_ALL=C.UTF-8

# Install dependencies
RUN apk update && \
    apk upgrade && \
    apk add --update --no-cache git make bash tar xz gnupg \
        coreutils libc6-compat protobuf gcompat

# Bash
SHELL [ "/bin/bash", "-c" ]

# Copy UPX
COPY --from=upx-builder /usr/src/upx/src/upx.out /usr/local/bin/upx

# Clone repository
RUN git clone --recursive https://github.com/pterodactyl/wings.git /usr/src/wings
WORKDIR /usr/src/wings

# Download Go dependencies
RUN go mod download

# Build wings
RUN export UNAME_ARCH="$(uname -m)" && \
    case ${UNAME_ARCH} in \
        aarch64) export ARCH="arm64" ;; \
        armv7l) export ARCH="arm" ;; \
        x86_64) export ARCH="amd64" ;; \
        i686) export ARCH="386" ;; \
        *) echo "Unknown architecture: ${UNAME_ARCH}" && exit 1 ;; \
    esac && \
    CGO_ENABLED=0 GOOS=linux GOARCH=${ARCH} go build \
        -ldflags="-s -w -X github.com/pterodactyl/wings/system.Version=docker" \
        -v \
        -trimpath \
        -o wings \
        wings.go
    
# Compress binaries
RUN upx wings

# Base OS
FROM ubuntu:focal

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=US/Pacific \
    LC_ALL=C.UTF-8

# Update system
RUN apt-get update && \
    apt-get -y upgrade

# Install base dependencies
RUN apt-get -y install software-properties-common \
    curl apt-transport-https ca-certificates gnupg \
    tar wget unzip zip apt dpkg sudo bash dash \
    lsb-release lsb-core

# Use bash
SHELL [ "/bin/bash", "-c" ]

# Add repositories and install Docker
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor \
    -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
    https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee \
    /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get -y upgrade && \
    apt-get -y install docker-ce-cli docker-ce containerd.io

# Setup wings
COPY --from=builder /usr/src/wings/wings /usr/local/bin/wings
COPY wings.service /etc/systemd/system/wings.service
RUN chmod a+rx /usr/local/bin/wings

# Add init script
COPY wings.sh /wings.sh
RUN chmod a+rx /wings.sh

# Volumes
VOLUME [ "/etc/pterodactyl" ]
VOLUME [ "/var/lib/docker" ]

# Start
CMD [ "/bin/bash", "/wings.sh" ]